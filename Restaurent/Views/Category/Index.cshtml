@using Microsoft.EntityFrameworkCore
@using Restaurent.Context
@model List<Restaurent.Models.Category>

@{
    ViewData["Title"] = "Manage Categories";
}

<div class="container mt-4">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="mb-1">
                <i class="fas fa-tags text-primary"></i> Manage Categories
            </h2>
            <p class="text-muted mb-0">Organize your products into categories</p>
        </div>
        <a asp-action="Create" class="btn btn-success btn-lg shadow-sm">
            <i class="fas fa-plus-circle"></i> Add New Category
        </a>
    </div>

    <!-- Success/Error Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show shadow-sm" role="alert">
            <i class="fas fa-check-circle me-2"></i>
            <strong>Success!</strong> @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show shadow-sm" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i>
            <strong>Error!</strong> @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (!Model.Any())
    {
        <!-- Empty State -->
        <div class="empty-state text-center py-5">
            <div class="empty-state-icon mb-4">
                <i class="fas fa-tags fa-5x text-muted"></i>
            </div>
            <h3 class="text-muted mb-3">No Categories Yet</h3>
            <p class="text-muted mb-4">Start organizing your menu by creating your first category!</p>
            <a asp-action="Create" class="btn btn-success btn-lg">
                <i class="fas fa-plus-circle"></i> Create First Category
            </a>
        </div>
    }
    else
    {
        <!-- Categories Grid -->
        <div class="row" id="categoriesGrid">
            @foreach (var category in Model.OrderByDescending(c => c.CreatedAt))
            {
                var productCount = await GetProductCount(category.Id);

                <div class="col-lg-3 col-md-4 col-sm-6 mb-4">
                    <div class="category-card card h-100 shadow-sm border-0">
                        <div class="card-body text-center">
                            <div class="category-icon-wrapper mb-3">
                                <div class="category-icon">
                                    <i class="fas fa-folder fa-3x"></i>
                                </div>
                                @if (productCount > 0)
                                {
                                    <span class="product-badge badge bg-primary">@productCount</span>
                                }
                            </div>

                            <h5 class="card-title mb-2">@category.Name</h5>

                            <div class="category-meta mb-3">
                                <small class="text-muted d-block">
                                    <i class="fas fa-calendar-alt"></i>
                                    @category.CreatedAt.ToString("MMM dd, yyyy")
                                </small>
                                @if (category.UpdateAt.HasValue)
                                {
                                    <small class="text-muted d-block">
                                        <i class="fas fa-edit"></i>
                                        Updated @category.UpdateAt.Value.ToString("MMM dd, yyyy")
                                    </small>
                                }
                            </div>

                            <div class="product-count-badge mb-3">
                                <span class="badge @(productCount > 0 ? "bg-success" : "bg-secondary")">
                                    <i class="fas fa-box"></i> @productCount Product@(productCount != 1 ? "s" : "")
                                </span>
                            </div>
                        </div>

                        <div class="card-footer bg-transparent border-0 pt-0">
                            <div class="d-flex gap-2">
                                <a asp-action="Edit" asp-route-id="@category.Id"
                                   class="btn btn-warning btn-sm flex-fill">
                                    <i class="fas fa-edit"></i> Edit
                                </a>

                                <!-- تغيير الزر ليكون form بدلاً من button -->
                                <form asp-action="Delete" method="post" class="flex-fill"
                                      onsubmit="return confirmDelete(@category.Id, '@category.Name.Replace("'", "\\'")', @productCount)">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="id" value="@category.Id" />
                                    <button type="submit" class="btn btn-danger btn-sm w-100"
                                            @(productCount > 0 ? "disabled" : "")>
                                        <i class="fas fa-trash"></i> Delete
                                    </button>
                                </form>
                            </div>
                            @if (productCount > 0)
                            {
                                <small class="text-danger d-block text-center mt-2">
                                    <i class="fas fa-lock"></i> Has products - cannot delete
                                </small>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Table View -->
        <div class="card shadow-sm border-0 mt-4">
            <div class="card-header bg-gradient-primary text-white">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-table"></i> Detailed View
                    </h5>
                </div>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0" id="categoriesTable">
                        <thead class="table-light">
                            <tr>
                                <th><i class="fas fa-hashtag"></i> ID</th>
                                <th><i class="fas fa-tag"></i> Name</th>
                                <th><i class="fas fa-calendar-plus"></i> Created</th>
                                <th><i class="fas fa-edit"></i> Last Updated</th>
                                <th><i class="fas fa-boxes"></i> Products</th>
                                <th><i class="fas fa-cog"></i> Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var category in Model)
                            {
                                var productCount = await GetProductCount(category.Id);

                                <tr>
                                    <td class="fw-bold">#@category.Id</td>
                                    <td>
                                        <i class="fas fa-folder text-primary me-2"></i>
                                        <strong>@category.Name</strong>
                                    </td>
                                    <td>
                                        @category.CreatedAt.ToString("MMM dd, yyyy")<br>
                                        <small class="text-muted">@category.CreatedAt.ToString("hh:mm tt")</small>
                                    </td>
                                    <td>
                                        @if (category.UpdateAt.HasValue)
                                        {
                                            @category.UpdateAt.Value.ToString("MMM dd, yyyy")
                                            <br>
                                            <small class="text-muted">@category.UpdateAt.Value.ToString("hh:mm tt")</small>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Never updated</span>
                                        }
                                    </td>
                                    <td>
                                        <span class="badge @(productCount > 0 ? "bg-success" : "bg-secondary")">
                                            @productCount product@(productCount != 1 ? "s" : "")
                                        </span>
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            <a asp-action="Edit" asp-route-id="@category.Id"
                                               class="btn btn-outline-warning"
                                               title="Edit Category">
                                                <i class="fas fa-edit"></i>
                                            </a>

                                            <!-- form للحذف في الجدول -->
                                            <form asp-action="Delete" method="post"
                                                  onsubmit="return confirmDelete(@category.Id, '@category.Name.Replace("'", "\\'")', @productCount)">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="id" value="@category.Id" />
                                                <button type="submit" class="btn btn-outline-danger"
                                                        title="Delete Category"
                                                        @(productCount > 0 ? "disabled" : "")>
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </form>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        // دالة التأكيد على الحذف
        function confirmDelete(categoryId, categoryName, productCount) {
            if (productCount > 0) {
                alert('Cannot delete category "' + categoryName + '" because it has ' + productCount + ' product(s). Please remove or reassign the products first.');
                return false;
            }

            return confirm('Are you sure you want to delete the category "' + categoryName + '"? This action cannot be undone!');
        }

        $(document).ready(function() {
            // إخفاء التنبيهات تلقائياً بعد 5 ثواني
            setTimeout(function() {
                $('.alert').fadeOut('slow');
            }, 5000);

            // تهيئة DataTable إذا كنت تستخدمها
            if ($.fn.DataTable) {
                $('#categoriesTable').DataTable({
                    pageLength: 10,
                    order: [[0, 'asc']],
                    language: {
                        search: "_INPUT_",
                        searchPlaceholder: "Search categories..."
                    }
                });
            }
        });
    </script>

    <style>
        .category-card {
            transition: all 0.3s ease;
        }

            .category-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 0.5rem 1rem rgba(0,0,0,0.15) !important;
            }

        .category-icon {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto;
        }

        .product-badge {
            position: absolute;
            top: -5px;
            right: -5px;
        }

        form {
            display: inline;
        }
    </style>
}

@functions {
    private async Task<int> GetProductCount(int categoryId)
    {
        try
        {
            var context = new AppDpContext();
            return await context.MenuProducts.CountAsync(p => p.CategoryId == categoryId && !p.IsDeleted);
        }
        catch
        {
            return 0;
        }
    }
}