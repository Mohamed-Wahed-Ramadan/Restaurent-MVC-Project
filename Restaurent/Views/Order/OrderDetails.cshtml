@model Restaurent.ViewModels.OrderVM

@{
    ViewData["Title"] = "Order Details";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h4 class="mb-0"><i class="fas fa-receipt"></i> Order Details</h4>
                    <span class="badge bg-@GetStatusBadgeClass(Model.Status) fs-6">@Model.Status</span>
                </div>
                <div class="card-body">
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <h6>Order Information</h6>
                            <dl class="row">
                                <dt class="col-sm-4">Order ID:</dt>
                                <dd class="col-sm-8">@Model.UniqueOrderId</dd>

                                <dt class="col-sm-4">Order Type:</dt>
                                <dd class="col-sm-8">@Model.OrderType</dd>

                                <dt class="col-sm-4">Location:</dt>
                                <dd class="col-sm-8">@Model.Location</dd>

                                <dt class="col-sm-4">Order Date:</dt>
                                <dd class="col-sm-8">@Model.CreatedAt.ToString("f")</dd>
                            </dl>
                        </div>
                        <div class="col-md-6">
                            <h6>Time Information</h6>
                            <dl class="row">
                                <dt class="col-sm-4">Estimated Time:</dt>
                                <dd class="col-sm-8">@Model.EstimatedTime minutes</dd>

                                @if (Model.OrderType == "Delivery")
                                {
                                    <dt class="col-sm-4">Delivery Time:</dt>
                                    <dd class="col-sm-8">@(Model.EstimatedTime + 30) minutes</dd>
                                }
                            </dl>
                        </div>
                    </div>

                    <h6>Order Items</h6>
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Product</th>
                                    <th>Price</th>
                                    <th>Quantity</th>
                                    <th>Total</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.OrderItems)
                                {
                                    <tr>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <img src="@item.ImageUrl" alt="@item.ProductName"
                                                     class="img-thumbnail me-3" style="width: 50px; height: 50px;"
                                                     onerror="this.src='/images/default.png'">
                                                <span>@item.ProductName</span>
                                            </div>
                                        </td>
                                        <td>@item.UnitPrice.ToString("N2") SAR</td>
                                        <td>@item.Quantity</td>
                                        <td>@item.Total.ToString("N2") SAR</td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td colspan="3" class="text-end"><strong>Total:</strong></td>
                                    <td><strong>@Model.Total.ToString("N2") SAR</strong></td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0"><i class="fas fa-info-circle"></i> Order Status</h5>
                </div>
                <div class="card-body">
                    <div class="timeline">
                        @await Html.PartialAsync("_OrderStatusTimeline", Model.Status)
                    </div>

                    <div class="alert alert-warning mt-3">
                        <i class="fas fa-exclamation-circle"></i>
                        <small>
                            @if (Model.OrderType == "DineIn")
                            {
                                <text>Please be at your table <strong>@Model.EstimatedTime minutes</strong> after ordering.</text>
                            }
                            else
                            {
                                <text>Your order will be delivered in approximately <strong>@(Model.EstimatedTime + 30) minutes</strong>.</text>
                            }
                        </small>
                    </div>
                </div>
            </div>

            <div class="card mt-3">
                <div class="card-body text-center">
                    <a asp-action="MyOrders" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Back to Orders
                    </a>
                    <a asp-controller="MenuProduct" asp-action="GetAll" class="btn btn-primary">
                        <i class="fas fa-utensils"></i> Order Again
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <style>
        .timeline {
            position: relative;
            padding-left: 30px;
        }

        .timeline-item {
            position: relative;
            margin-bottom: 20px;
        }

            .timeline-item:before {
                content: '';
                position: absolute;
                left: -30px;
                top: 5px;
                width: 12px;
                height: 12px;
                border-radius: 50%;
                background: #dee2e6;
            }

            .timeline-item.active:before {
                background: #0d6efd;
            }

            .timeline-item.completed:before {
                background: #198754;
            }
    </style>
}

@functions {
    public string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "pending" => "warning",
            "preparing" => "info",
            "ready" => "primary",
            "completed" => "success",
            "cancelled" => "danger",
            _ => "secondary"
        };
    }
}