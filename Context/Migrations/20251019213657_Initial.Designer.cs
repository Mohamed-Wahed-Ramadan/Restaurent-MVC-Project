// <auto-generated />
using System;
using Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Context.Migrations
{
    [DbContext(typeof(AppDpContext))]
    [Migration("20251019213657_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MenuProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MenuProductId");

                    b.HasIndex("UserId", "MenuProductId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("IsDeletedBy")
                        .HasColumnType("int");

                    b.Property<int?>("IsUpdateBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Salads"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Soups"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Burgers"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Cakes & Desserts"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Beverages"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Seafood"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Grilled & BBQ"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Pizza"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Pies & Pastries"
                        });
                });

            modelBuilder.Entity("Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAgeBased")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxAge")
                        .HasColumnType("int");

                    b.Property<int?>("MinAge")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Models.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MenuProductId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MenuProductId");

                    b.HasIndex("UserId", "MenuProductId")
                        .IsUnique();

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("Models.MenuProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DayStock")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("IsDeletedBy")
                        .HasColumnType("int");

                    b.Property<int?>("IsUpdateBy")
                        .HasColumnType("int");

                    b.Property<int>("MaxTime")
                        .HasColumnType("int");

                    b.Property<int>("MinTime")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name");

                    b.ToTable("MenuProducts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 50,
                            Description = "Fresh mixed greens with cherry tomatoes, cucumbers, and house dressing",
                            ImageUrl = "/images/a1.png",
                            IsDeleted = false,
                            MaxTime = 10,
                            MinTime = 5,
                            Name = "Fresh Garden Salad",
                            Price = 45m,
                            Quantity = 50
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 40,
                            Description = "Colorful assorted fresh fruits with honey drizzle",
                            ImageUrl = "/images/a2.png",
                            IsDeleted = false,
                            MaxTime = 8,
                            MinTime = 5,
                            Name = "Fruit Paradise Bowl",
                            Price = 55m,
                            Quantity = 40
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 60,
                            Description = "Rich and creamy sweet corn soup",
                            ImageUrl = "/images/a3.png",
                            IsDeleted = false,
                            MaxTime = 12,
                            MinTime = 8,
                            Name = "Creamy Corn Soup",
                            Price = 35m,
                            Quantity = 60
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 55,
                            Description = "Traditional tomato soup with fresh basil",
                            ImageUrl = "/images/a4.png",
                            IsDeleted = false,
                            MaxTime = 12,
                            MinTime = 8,
                            Name = "Classic Tomato Soup",
                            Price = 30m,
                            Quantity = 55
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 50,
                            Description = "Velvety mushroom soup with herbs",
                            ImageUrl = "/images/a5.png",
                            IsDeleted = false,
                            MaxTime = 15,
                            MinTime = 10,
                            Name = "Creamy Mushroom Soup",
                            Price = 40m,
                            Quantity = 50
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 35,
                            Description = "Rich seafood soup with prawns and fish",
                            ImageUrl = "/images/a6.png",
                            IsDeleted = false,
                            MaxTime = 18,
                            MinTime = 12,
                            Name = "Seafood Chowder",
                            Price = 65m,
                            Quantity = 35
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 60,
                            Description = "Light and fluffy egg drop soup",
                            ImageUrl = "/images/a7.png",
                            IsDeleted = false,
                            MaxTime = 10,
                            MinTime = 8,
                            Name = "Golden Egg Drop Soup",
                            Price = 28m,
                            Quantity = 60
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 100,
                            Description = "Crispy golden French fries",
                            ImageUrl = "/images/a8.png",
                            IsDeleted = false,
                            MaxTime = 12,
                            MinTime = 8,
                            Name = "Golden French Fries",
                            Price = 25m,
                            Quantity = 100
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 200,
                            Description = "Classic tomato ketchup",
                            ImageUrl = "/images/a9.png",
                            IsDeleted = false,
                            MaxTime = 2,
                            MinTime = 1,
                            Name = "Ketchup Dip",
                            Price = 8m,
                            Quantity = 200
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 80,
                            Description = "Juicy beef patty with cheese and fresh vegetables",
                            ImageUrl = "/images/b1.png",
                            IsDeleted = false,
                            MaxTime = 20,
                            MinTime = 15,
                            Name = "Classic Beef Burger",
                            Price = 55m,
                            Quantity = 80
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 60,
                            Description = "Two beef patties with double cheese",
                            ImageUrl = "/images/b2.png",
                            IsDeleted = false,
                            MaxTime = 25,
                            MinTime = 18,
                            Name = "Double Decker Burger",
                            Price = 75m,
                            Quantity = 60
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 45,
                            Description = "Three layers of beef patties with special sauce",
                            ImageUrl = "/images/b3.png",
                            IsDeleted = false,
                            MaxTime = 28,
                            MinTime = 20,
                            Name = "Triple Stack Burger",
                            Price = 95m,
                            Quantity = 45
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 30,
                            Description = "Huge burger with multiple patties and toppings",
                            ImageUrl = "/images/b4.png",
                            IsDeleted = false,
                            MaxTime = 30,
                            MinTime = 25,
                            Name = "Mega Monster Burger",
                            Price = 110m,
                            Quantity = 30
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 70,
                            Description = "Burger combo with fries",
                            ImageUrl = "/images/b5.png",
                            IsDeleted = false,
                            MaxTime = 22,
                            MinTime = 18,
                            Name = "Deluxe Combo Burger",
                            Price = 65m,
                            Quantity = 70
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 75,
                            Description = "Crispy fried chicken with fresh lettuce",
                            ImageUrl = "/images/b6.png",
                            IsDeleted = false,
                            MaxTime = 20,
                            MinTime = 15,
                            Name = "Crispy Chicken Burger",
                            Price = 50m,
                            Quantity = 75
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 55,
                            Description = "Beef burger with crispy bacon and BBQ sauce",
                            ImageUrl = "/images/b7.png",
                            IsDeleted = false,
                            MaxTime = 23,
                            MinTime = 18,
                            Name = "BBQ Bacon Burger",
                            Price = 70m,
                            Quantity = 55
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 40,
                            Description = "Premium beef with caramelized onions and special sauce",
                            ImageUrl = "/images/b8.png",
                            IsDeleted = false,
                            MaxTime = 25,
                            MinTime = 20,
                            Name = "Premium Gourmet Burger",
                            Price = 85m,
                            Quantity = 40
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 65,
                            Description = "Spicy burger with jalapeños and pepper jack cheese",
                            ImageUrl = "/images/b9.png",
                            IsDeleted = false,
                            MaxTime = 22,
                            MinTime = 16,
                            Name = "Spicy Jalapeño Burger",
                            Price = 60m,
                            Quantity = 65
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 100,
                            Description = "Soft vanilla cupcake with cream frosting",
                            ImageUrl = "/images/c1.png",
                            IsDeleted = false,
                            MaxTime = 8,
                            MinTime = 5,
                            Name = "Vanilla Cupcake",
                            Price = 20m,
                            Quantity = 100
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 95,
                            Description = "Rich chocolate cupcake with chocolate frosting",
                            ImageUrl = "/images/c2.png",
                            IsDeleted = false,
                            MaxTime = 8,
                            MinTime = 5,
                            Name = "Chocolate Cupcake",
                            Price = 22m,
                            Quantity = 95
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 50,
                            Description = "Tangy passion fruit tart with fresh cream",
                            ImageUrl = "/images/c3.png",
                            IsDeleted = false,
                            MaxTime = 10,
                            MinTime = 8,
                            Name = "Passion Fruit Tart",
                            Price = 35m,
                            Quantity = 50
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 20,
                            Description = "Classic Black Forest cake with cherries and whipped cream",
                            ImageUrl = "/images/c4.png",
                            IsDeleted = false,
                            MaxTime = 15,
                            MinTime = 10,
                            Name = "Black Forest Cake",
                            Price = 120m,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 40,
                            Description = "Creamy cheesecake topped with fresh strawberries",
                            ImageUrl = "/images/c5.png",
                            IsDeleted = false,
                            MaxTime = 12,
                            MinTime = 8,
                            Name = "Strawberry Cheesecake",
                            Price = 65m,
                            Quantity = 40
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 45,
                            Description = "Chocolate cake with Oreo cream filling",
                            ImageUrl = "/images/c6.png",
                            IsDeleted = false,
                            MaxTime = 12,
                            MinTime = 8,
                            Name = "Cookies & Cream Cake",
                            Price = 55m,
                            Quantity = 45
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 60,
                            Description = "Classic red velvet cake with cream cheese frosting",
                            ImageUrl = "/images/c7.png",
                            IsDeleted = false,
                            MaxTime = 10,
                            MinTime = 6,
                            Name = "Red Velvet Cake Slice",
                            Price = 45m,
                            Quantity = 60
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 35,
                            Description = "Tangy lemon filling with fluffy meringue topping",
                            ImageUrl = "/images/c8.png",
                            IsDeleted = false,
                            MaxTime = 10,
                            MinTime = 8,
                            Name = "Lemon Meringue Pie",
                            Price = 40m,
                            Quantity = 35
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 80,
                            Description = "Chocolate and vanilla ice cream with toppings",
                            ImageUrl = "/images/c9.png",
                            IsDeleted = false,
                            MaxTime = 8,
                            MinTime = 5,
                            Name = "Ice Cream Sundae",
                            Price = 38m,
                            Quantity = 80
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 60,
                            Description = "Healthy green smoothie with spinach and fruits",
                            ImageUrl = "/images/d2.png",
                            IsDeleted = false,
                            MaxTime = 8,
                            MinTime = 5,
                            Name = "Green Detox Smoothie",
                            Price = 32m,
                            Quantity = 60
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 70,
                            Description = "Refreshing mint mojito with lime",
                            ImageUrl = "/images/d3.png",
                            IsDeleted = false,
                            MaxTime = 8,
                            MinTime = 5,
                            Name = "Mint Mojito",
                            Price = 28m,
                            Quantity = 70
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 80,
                            Description = "Freshly squeezed orange juice",
                            ImageUrl = "/images/d4.png",
                            IsDeleted = false,
                            MaxTime = 7,
                            MinTime = 5,
                            Name = "Fresh Orange Juice",
                            Price = 25m,
                            Quantity = 80
                        },
                        new
                        {
                            Id = 31,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 65,
                            Description = "Creamy strawberry milkshake",
                            ImageUrl = "/images/d5.png",
                            IsDeleted = false,
                            MaxTime = 10,
                            MinTime = 6,
                            Name = "Strawberry Milkshake",
                            Price = 35m,
                            Quantity = 65
                        },
                        new
                        {
                            Id = 32,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 75,
                            Description = "Fresh watermelon juice",
                            ImageUrl = "/images/d6.png",
                            IsDeleted = false,
                            MaxTime = 8,
                            MinTime = 5,
                            Name = "Watermelon Juice",
                            Price = 22m,
                            Quantity = 75
                        },
                        new
                        {
                            Id = 33,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 90,
                            Description = "Classic fresh lemonade",
                            ImageUrl = "/images/d7.png",
                            IsDeleted = false,
                            MaxTime = 7,
                            MinTime = 5,
                            Name = "Lemonade",
                            Price = 20m,
                            Quantity = 90
                        },
                        new
                        {
                            Id = 34,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 70,
                            Description = "Thick strawberry smoothie",
                            ImageUrl = "/images/d8.png",
                            IsDeleted = false,
                            MaxTime = 9,
                            MinTime = 6,
                            Name = "Strawberry Smoothie",
                            Price = 30m,
                            Quantity = 70
                        },
                        new
                        {
                            Id = 35,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 65,
                            Description = "Tropical mango smoothie",
                            ImageUrl = "/images/d9.png",
                            IsDeleted = false,
                            MaxTime = 9,
                            MinTime = 6,
                            Name = "Mango Smoothie",
                            Price = 32m,
                            Quantity = 65
                        },
                        new
                        {
                            Id = 36,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 100,
                            Description = "Traditional hot tea",
                            ImageUrl = "/images/d10.png",
                            IsDeleted = false,
                            MaxTime = 8,
                            MinTime = 5,
                            Name = "Hot Tea",
                            Price = 15m,
                            Quantity = 100
                        },
                        new
                        {
                            Id = 37,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 85,
                            Description = "Rich Italian cappuccino",
                            ImageUrl = "/images/d11.png",
                            IsDeleted = false,
                            MaxTime = 10,
                            MinTime = 6,
                            Name = "Cappuccino",
                            Price = 28m,
                            Quantity = 85
                        },
                        new
                        {
                            Id = 38,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 75,
                            Description = "Artistic latte with milk foam",
                            ImageUrl = "/images/d12.png",
                            IsDeleted = false,
                            MaxTime = 12,
                            MinTime = 7,
                            Name = "Latte Art Coffee",
                            Price = 30m,
                            Quantity = 75
                        },
                        new
                        {
                            Id = 39,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 90,
                            Description = "Strong Italian espresso",
                            ImageUrl = "/images/d13.png",
                            IsDeleted = false,
                            MaxTime = 8,
                            MinTime = 5,
                            Name = "Espresso",
                            Price = 25m,
                            Quantity = 90
                        },
                        new
                        {
                            Id = 40,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 40,
                            Description = "Fresh shrimp with cocktail sauce",
                            ImageUrl = "/images/f1.png",
                            IsDeleted = false,
                            MaxTime = 20,
                            MinTime = 15,
                            Name = "Shrimp Platter",
                            Price = 95m,
                            Quantity = 40
                        },
                        new
                        {
                            Id = 41,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 35,
                            Description = "Assorted fresh sushi rolls",
                            ImageUrl = "/images/f2.png",
                            IsDeleted = false,
                            MaxTime = 25,
                            MinTime = 20,
                            Name = "Sushi Platter",
                            Price = 120m,
                            Quantity = 35
                        },
                        new
                        {
                            Id = 42,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 45,
                            Description = "Perfectly grilled fish with lemon",
                            ImageUrl = "/images/f3.png",
                            IsDeleted = false,
                            MaxTime = 25,
                            MinTime = 18,
                            Name = "Grilled Fish Fillet",
                            Price = 85m,
                            Quantity = 45
                        },
                        new
                        {
                            Id = 43,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 30,
                            Description = "Premium grilled salmon steak",
                            ImageUrl = "/images/f4.png",
                            IsDeleted = false,
                            MaxTime = 28,
                            MinTime = 20,
                            Name = "Grilled Salmon",
                            Price = 110m,
                            Quantity = 30
                        },
                        new
                        {
                            Id = 44,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 55,
                            Description = "Crispy fried calamari rings",
                            ImageUrl = "/images/f5.png",
                            IsDeleted = false,
                            MaxTime = 18,
                            MinTime = 12,
                            Name = "Calamari Rings",
                            Price = 65m,
                            Quantity = 55
                        },
                        new
                        {
                            Id = 45,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 50,
                            Description = "Classic British fish and chips",
                            ImageUrl = "/images/f6.png",
                            IsDeleted = false,
                            MaxTime = 22,
                            MinTime = 15,
                            Name = "Fish & Chips",
                            Price = 70m,
                            Quantity = 50
                        },
                        new
                        {
                            Id = 46,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 48,
                            Description = "Crispy breaded jumbo shrimp",
                            ImageUrl = "/images/f7.png",
                            IsDeleted = false,
                            MaxTime = 20,
                            MinTime = 15,
                            Name = "Breaded Shrimp",
                            Price = 75m,
                            Quantity = 48
                        },
                        new
                        {
                            Id = 47,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 25,
                            Description = "Spanish seafood rice with mixed seafood",
                            ImageUrl = "/images/f8.png",
                            IsDeleted = false,
                            MaxTime = 35,
                            MinTime = 25,
                            Name = "Seafood Paella",
                            Price = 130m,
                            Quantity = 25
                        },
                        new
                        {
                            Id = 48,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 15,
                            Description = "Grilled whole lobster with butter sauce",
                            ImageUrl = "/images/f9.png",
                            IsDeleted = false,
                            MaxTime = 40,
                            MinTime = 30,
                            Name = "Lobster Special",
                            Price = 180m,
                            Quantity = 15
                        },
                        new
                        {
                            Id = 49,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 70,
                            Description = "Hot and spicy chicken wings",
                            ImageUrl = "/images/g1.png",
                            IsDeleted = false,
                            MaxTime = 20,
                            MinTime = 15,
                            Name = "Spicy Wings",
                            Price = 55m,
                            Quantity = 70
                        },
                        new
                        {
                            Id = 50,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 65,
                            Description = "Chicken wings with BBQ glaze",
                            ImageUrl = "/images/g2.png",
                            IsDeleted = false,
                            MaxTime = 22,
                            MinTime = 15,
                            Name = "BBQ Chicken Wings",
                            Price = 58m,
                            Quantity = 65
                        },
                        new
                        {
                            Id = 51,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 35,
                            Description = "Assorted grilled meats with vegetables",
                            ImageUrl = "/images/g3.png",
                            IsDeleted = false,
                            MaxTime = 35,
                            MinTime = 25,
                            Name = "Mixed Grill Platter",
                            Price = 140m,
                            Quantity = 35
                        },
                        new
                        {
                            Id = 52,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 30,
                            Description = "Premium beef steak grilled to perfection",
                            ImageUrl = "/images/g4.png",
                            IsDeleted = false,
                            MaxTime = 30,
                            MinTime = 22,
                            Name = "Grilled Steak",
                            Price = 150m,
                            Quantity = 30
                        },
                        new
                        {
                            Id = 53,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 55,
                            Description = "Grilled chicken kebabs with spices",
                            ImageUrl = "/images/g5.png",
                            IsDeleted = false,
                            MaxTime = 25,
                            MinTime = 18,
                            Name = "Chicken Kebab Skewers",
                            Price = 75m,
                            Quantity = 55
                        },
                        new
                        {
                            Id = 54,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 40,
                            Description = "Tender BBQ pork ribs",
                            ImageUrl = "/images/g6.png",
                            IsDeleted = false,
                            MaxTime = 35,
                            MinTime = 25,
                            Name = "BBQ Ribs",
                            Price = 95m,
                            Quantity = 40
                        },
                        new
                        {
                            Id = 55,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 28,
                            Description = "Juicy grilled lamb chops with herbs",
                            ImageUrl = "/images/g7.png",
                            IsDeleted = false,
                            MaxTime = 30,
                            MinTime = 22,
                            Name = "Grilled Lamb Chops",
                            Price = 135m,
                            Quantity = 28
                        },
                        new
                        {
                            Id = 56,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 32,
                            Description = "Assorted meat kebabs with grilled vegetables",
                            ImageUrl = "/images/g8.png",
                            IsDeleted = false,
                            MaxTime = 28,
                            MinTime = 22,
                            Name = "Mixed Kebab Platter",
                            Price = 120m,
                            Quantity = 32
                        },
                        new
                        {
                            Id = 57,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 60,
                            Description = "Grilled chicken drumsticks with spices",
                            ImageUrl = "/images/g9.png",
                            IsDeleted = false,
                            MaxTime = 25,
                            MinTime = 18,
                            Name = "Chicken Drumsticks",
                            Price = 65m,
                            Quantity = 60
                        },
                        new
                        {
                            Id = 58,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 45,
                            Description = "Sticky BBQ chicken wings with sauce",
                            ImageUrl = "/images/g111.png",
                            IsDeleted = false,
                            MaxTime = 25,
                            MinTime = 20,
                            Name = "BBQ Wings Special",
                            Price = 85m,
                            Quantity = 45
                        },
                        new
                        {
                            Id = 59,
                            CategoryId = 8,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 50,
                            Description = "Classic pizza with tomato, mozzarella, and basil",
                            ImageUrl = "/images/p1.png",
                            IsDeleted = false,
                            MaxTime = 22,
                            MinTime = 15,
                            Name = "Margherita Pizza",
                            Price = 65m,
                            Quantity = 50
                        },
                        new
                        {
                            Id = 60,
                            CategoryId = 8,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 55,
                            Description = "Classic pepperoni with mozzarella cheese",
                            ImageUrl = "/images/p2.png",
                            IsDeleted = false,
                            MaxTime = 22,
                            MinTime = 15,
                            Name = "Pepperoni Pizza",
                            Price = 75m,
                            Quantity = 55
                        },
                        new
                        {
                            Id = 61,
                            CategoryId = 8,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 45,
                            Description = "Loaded with pepperoni, sausage, peppers, and more",
                            ImageUrl = "/images/p3.png",
                            IsDeleted = false,
                            MaxTime = 25,
                            MinTime = 18,
                            Name = "Supreme Pizza",
                            Price = 95m,
                            Quantity = 45
                        },
                        new
                        {
                            Id = 62,
                            CategoryId = 8,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 48,
                            Description = "Fresh vegetables with mozzarella and tomato sauce",
                            ImageUrl = "/images/p4.png",
                            IsDeleted = false,
                            MaxTime = 22,
                            MinTime = 15,
                            Name = "Vegetarian Pizza",
                            Price = 70m,
                            Quantity = 48
                        },
                        new
                        {
                            Id = 63,
                            CategoryId = 8,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 42,
                            Description = "Four cheese blend pizza",
                            ImageUrl = "/images/p5.png",
                            IsDeleted = false,
                            MaxTime = 23,
                            MinTime = 16,
                            Name = "Cheese Lovers Pizza",
                            Price = 80m,
                            Quantity = 42
                        },
                        new
                        {
                            Id = 64,
                            CategoryId = 8,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 40,
                            Description = "Grilled chicken with BBQ sauce and onions",
                            ImageUrl = "/images/p6.png",
                            IsDeleted = false,
                            MaxTime = 25,
                            MinTime = 18,
                            Name = "BBQ Chicken Pizza",
                            Price = 85m,
                            Quantity = 40
                        },
                        new
                        {
                            Id = 65,
                            CategoryId = 8,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 46,
                            Description = "Ham and pineapple with mozzarella",
                            ImageUrl = "/images/p7.png",
                            IsDeleted = false,
                            MaxTime = 22,
                            MinTime = 15,
                            Name = "Hawaiian Pizza",
                            Price = 75m,
                            Quantity = 46
                        },
                        new
                        {
                            Id = 66,
                            CategoryId = 8,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 38,
                            Description = "Loaded with various meats and cheese",
                            ImageUrl = "/images/p8.png",
                            IsDeleted = false,
                            MaxTime = 26,
                            MinTime = 18,
                            Name = "Meat Feast Pizza",
                            Price = 98m,
                            Quantity = 38
                        },
                        new
                        {
                            Id = 67,
                            CategoryId = 9,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 45,
                            Description = "Classic American apple pie with cinnamon",
                            ImageUrl = "/images/s1.png",
                            IsDeleted = false,
                            MaxTime = 15,
                            MinTime = 10,
                            Name = "Apple Pie",
                            Price = 55m,
                            Quantity = 45
                        },
                        new
                        {
                            Id = 68,
                            CategoryId = 9,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 40,
                            Description = "Sweet cherry pie with lattice crust",
                            ImageUrl = "/images/s2.png",
                            IsDeleted = false,
                            MaxTime = 15,
                            MinTime = 10,
                            Name = "Cherry Pie",
                            Price = 58m,
                            Quantity = 40
                        },
                        new
                        {
                            Id = 69,
                            CategoryId = 9,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 60,
                            Description = "French crepes with sweet filling",
                            ImageUrl = "/images/s3.png",
                            IsDeleted = false,
                            MaxTime = 12,
                            MinTime = 8,
                            Name = "Crepes",
                            Price = 42m,
                            Quantity = 60
                        },
                        new
                        {
                            Id = 70,
                            CategoryId = 9,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 55,
                            Description = "Belgian waffle topped with fresh strawberries",
                            ImageUrl = "/images/s4.png",
                            IsDeleted = false,
                            MaxTime = 15,
                            MinTime = 10,
                            Name = "Strawberry Waffle",
                            Price = 48m,
                            Quantity = 55
                        },
                        new
                        {
                            Id = 71,
                            CategoryId = 9,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 80,
                            Description = "Flaky French butter croissants",
                            ImageUrl = "/images/s5.png",
                            IsDeleted = false,
                            MaxTime = 8,
                            MinTime = 5,
                            Name = "Butter Croissants",
                            Price = 25m,
                            Quantity = 80
                        },
                        new
                        {
                            Id = 72,
                            CategoryId = 9,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 70,
                            Description = "Sweet cinnamon roll with cream cheese frosting",
                            ImageUrl = "/images/s6.png",
                            IsDeleted = false,
                            MaxTime = 12,
                            MinTime = 8,
                            Name = "Cinnamon Roll",
                            Price = 32m,
                            Quantity = 70
                        },
                        new
                        {
                            Id = 73,
                            CategoryId = 9,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 35,
                            Description = "Assorted sweet pastries and cookies",
                            ImageUrl = "/images/s7.png",
                            IsDeleted = false,
                            MaxTime = 12,
                            MinTime = 10,
                            Name = "Mixed Pastry Box",
                            Price = 65m,
                            Quantity = 35
                        },
                        new
                        {
                            Id = 74,
                            CategoryId = 9,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 65,
                            Description = "Assorted Danish pastries with fruit filling",
                            ImageUrl = "/images/s8.png",
                            IsDeleted = false,
                            MaxTime = 10,
                            MinTime = 8,
                            Name = "Danish Pastries",
                            Price = 38m,
                            Quantity = 65
                        },
                        new
                        {
                            Id = 75,
                            CategoryId = 9,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStock = 60,
                            Description = "Fresh breakfast sandwich with egg and cheese",
                            ImageUrl = "/images/s9.png",
                            IsDeleted = false,
                            MaxTime = 15,
                            MinTime = 10,
                            Name = "Breakfast Sandwich",
                            Price = 45m,
                            Quantity = 60
                        });
                });

            modelBuilder.Entity("Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("TableNumber")
                        .HasColumnType("int");

                    b.Property<int>("TimePreparing")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UniqueOrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Status");

                    b.HasIndex("UniqueOrderId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MenuProductId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MenuProductId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1999, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "803717a9-4924-4252-adee-e9194ff3521d",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "medo03459@gmail.com",
                            EmailConfirmed = true,
                            IsAdmin = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEDO03459@GMAIL.COM",
                            NormalizedUserName = "MEDO03459",
                            PasswordHash = "AQAAAAIAAYagAAAAEGujmCBFWVkseMSmwkHJzelfLQqoDKV+HJz237coxCt+D2110MiU+PozkkFpJ39rbA==",
                            PhoneNumber = "+201123002663",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a25304c2-a47a-44b5-99f5-a8e0b0440f93",
                            TwoFactorEnabled = false,
                            UserName = "medo03459"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1999, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "8aed222c-908e-4219-a435-f6c6038b8298",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "4dm1n@gmail.com",
                            EmailConfirmed = true,
                            IsAdmin = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "4DM1N@GMAIL.COM",
                            NormalizedUserName = "4DM1N",
                            PasswordHash = "AQAAAAIAAYagAAAAEOJRs4ccVxOzLJOvdBlxF2Ivs7dO0Tcxsmp3URw3mOwc25pH64//Zm8TgpwTRn6pSA==",
                            PhoneNumber = "+201123002663",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f8170840-6975-4a6e-ab4f-49bf7d86bafb",
                            TwoFactorEnabled = false,
                            UserName = "4dm1n"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Cart", b =>
                {
                    b.HasOne("Models.MenuProduct", "MenuProduct")
                        .WithMany()
                        .HasForeignKey("MenuProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", "User")
                        .WithMany("CartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuProduct");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Discount", b =>
                {
                    b.HasOne("Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Models.Favorite", b =>
                {
                    b.HasOne("Models.MenuProduct", "MenuProduct")
                        .WithMany()
                        .HasForeignKey("MenuProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuProduct");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.MenuProduct", b =>
                {
                    b.HasOne("Models.Category", "Category")
                        .WithMany("MenuProduct")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Models.Order", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.OrderItem", b =>
                {
                    b.HasOne("Models.MenuProduct", "MenuProduct")
                        .WithMany()
                        .HasForeignKey("MenuProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuProduct");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Models.Category", b =>
                {
                    b.Navigation("MenuProduct");
                });

            modelBuilder.Entity("Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Favorites");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
